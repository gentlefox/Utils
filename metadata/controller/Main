{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "Main"
    },
    "designerId": "608e4500-7d54-4ed8-8f84-73f63b2a62e8",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "launch",
                "implHandler": [
                    "this.initUtil();\r",
                    "\r",
                    "// \"global\" required variables accessed via MyApp.config.Runtime\r",
                    "// MyApp.config.Runtime.getMyRequiredVariable();\r",
                    "// MyApp.config.Runtime.setMyRequiredVariable(12345);"
                ]
            },
            "designerId": "c194f605-d01f-4650-8b64-b996d39962e5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "initUtil",
                "implHandler": [
                    "MyApp.Util = {};\r",
                    "\r",
                    "// takes the date in any format and returns a text description of duration\r",
                    "// ie \"3 hours ago\"\r",
                    "// replace \"MyApp.app.translate()\" with strings if not using localization\r",
                    "MyApp.Util.getPostedTime = function(date) {\r",
                    "    try {\r",
                    "        var now      = Math.ceil(Number(new Date()) / 1000),\r",
                    "            dateTime = Math.ceil(Number(new Date(date)) / 1000),\r",
                    "            diff     = now - dateTime,\r",
                    "            str;\r",
                    "\r",
                    "        if (diff < 60) {\r",
                    "            return String(diff) + ' ' + MyApp.app.translate('general-time-seconds-ago');\r",
                    "        } else if (diff < 3600) {\r",
                    "            str = String(Math.ceil(diff / (60)));\r",
                    "            return str + (str == \"1\" ? ' ' + MyApp.app.translate('general-time-minute-ago') : ' ' + MyApp.app.translate('general-time-minutes-ago'));\r",
                    "        } else if (diff < 86400) {\r",
                    "            str = String(Math.ceil(diff / (3600)));\r",
                    "            return str + (str == \"1\" ? ' ' + MyApp.app.translate('general-time-hour-ago') : ' ' + MyApp.app.translate('general-time-hours-ago'));\r",
                    "        } else if (diff < 60 * 60 * 24 * 365) {\r",
                    "            str = String(Math.ceil(diff / (60 * 60 * 24)));\r",
                    "            return str + (str == \"1\" ? ' ' + MyApp.app.translate('general-time-day-ago') : ' ' + MyApp.app.translate('general-time-days-ago'));\r",
                    "        } else {\r",
                    "            return Ext.Date.format(new Date(date), 'jS M \\'y');\r",
                    "        }\r",
                    "    } catch (e) {\r",
                    "        return '';\r",
                    "    }\r",
                    "};\r",
                    "\r",
                    "// Ellipses truncation utility, replacement for any redundant MyApp.Util.truncate calls.\r",
                    "// short: ellipses(22, true) where 22 = number of characters\r",
                    "// long: Ext.String.ellipses(string, length, word-remove-boolean);\r",
                    "MyApp.Util.truncate = function(str, limit, wordRemove) {\r",
                    "    return Ext.String.ellipsis(str, limit, wordRemove);\r",
                    "};\r",
                    "\r",
                    "// MyApp.Util.formatDate replacement for\r",
                    "MyApp.Util.formatDate = function(date) {\r",
                    "    return Ext.Date.format(date, 'j/n/Y');\r",
                    "};\r",
                    "\r",
                    "// Named unTard for the tard efforts of some CMSes mixing output of encoding.\r",
                    "// str - input string; type - output method\r",
                    "MyApp.Util.unTard = function(str, type, linkth) {\r",
                    "    if (type == \"url\") {\r",
                    "\r",
                    "        str = str.replace(/&rsquo;/g, '&#39;')\r",
                    "        .replace(/<br>/g, '%0d')\r",
                    "        .replace(/'/g, '%27')\r",
                    "        .replace(/(&nbsp;|\\s)+|(&nbsp;|\\s)+/g, '%20');\r",
                    "        str = Ext.String.htmlDecode(str);\r",
                    "\r",
                    "    } else if (type == \"twitter\") {\r",
                    "\r",
                    "        str = str.replace(/&rsquo;/g, \"'\")\r",
                    "        .replace(/&quot;/g, '\"')\r",
                    "        .replace(/(&nbsp;|\\s)+|(&nbsp;|\\s)+/g, ' ');\r",
                    "\r",
                    "        // str should be near natural. Apply ellipses at length \"linkth\"\r",
                    "        // consider: move string length calculation here to maximize string length\r",
                    "        // before truncation, considering length of replacement characters.\r",
                    "        // Else, make a \"true\" calculator of character length catering to encoding.\r",
                    "        str = Ext.String.ellipsis(str, linkth, false);\r",
                    "\r",
                    "        // ...and once again prepare the str for use as query string\r",
                    "        str = str.replace(/&rsquo;/g, '&#39;')\r",
                    "        .replace(/<br>/g, '%0d')\r",
                    "        .replace(/'/g, '%27')\r",
                    "        .replace(/(&nbsp;|\\s)+|(&nbsp;|\\s)+/g, '%20');\r",
                    "        str = Ext.String.htmlDecode(str);\r",
                    "\r",
                    "    } else {\r",
                    "        // string format. convert the other way.\r",
                    "        str = str.replace(/&rsquo;/g, \"'\")\r",
                    "        .replace(/<br>/g, ' ')\r",
                    "        .replace(/(&nbsp;|\\s)+|(&nbsp;|\\s)+/g, ' ');\r",
                    "        str = Ext.String.htmlDecode(str);\r",
                    "    }\r",
                    "    /* other useful replacements\r",
                    "        .replace(/'/g, '%27')\r",
                    "        .replace(/&#39;/g, '%27')\r",
                    "        .replace(/\\./g, '%2E')\r",
                    "        .replace(/\\,/g, '%2C')\r",
                    "        .replace(/(\\s)/, '%20');\r",
                    "        */\r",
                    "        // test:\r",
                    "        // console.log('str after untard', str);\r",
                    "        return str;\r",
                    "    };\r",
                    "\r",
                    "// Generates an unseen a-tag link and auto-fires the input href.\r",
                    "// This utility is a blessing for things such as dynamic social buttons which\r",
                    "// get blocked by device security, timing issues, etc.\r",
                    "MyApp.Util.openLink = function(href) {\r",
                    "    var link = document.createElement('a');\r",
                    "    link.setAttribute('href', href);\r",
                    "    link.setAttribute('target','_blank');\r",
                    "    var clickevent = document.createEvent('Event');\r",
                    "    clickevent.initEvent('click', true, false);\r",
                    "    link.dispatchEvent(clickevent);\r",
                    "    return false;\r",
                    "};\r",
                    "\r",
                    "// For the classic cookie experience.\r",
                    "// For modern, localStorage is so incredibly complex!!\r",
                    "// err... not.\r",
                    "// localStorage.getItem(name);\r",
                    "// localStorage.setItem(name, value);\r",
                    "MyApp.Util.createCookie = function(name, value, days) {\r",
                    "    var expires;\r",
                    "\r",
                    "    if (days) {\r",
                    "        expires = \"; expires=\" + (Ext.Date.add(new Date(), Ext.Date.DAY, days));\r",
                    "    } else {\r",
                    "        expires = \"\";\r",
                    "    }\r",
                    "    document.cookie = name + \"=\" + value + expires + \"; path=/\";\r",
                    "};\r",
                    "\r",
                    "MyApp.Util.readCookie = function(name) {\r",
                    "    var nameEQ = name + \"=\",\r",
                    "        ca     = document.cookie.split(';'),\r",
                    "        i, c;\r",
                    "    for(i=0;i < ca.length;i++) {\r",
                    "        c = ca[i];\r",
                    "        while (c.charAt(0) == ' ') {\r",
                    "            c = c.substring(1,c.length);\r",
                    "        }\r",
                    "        if (c.indexOf(nameEQ) === 0) {\r",
                    "            return c.substring(nameEQ.length,c.length);\r",
                    "        }\r",
                    "    }\r",
                    "    return null;\r",
                    "};\r",
                    "\r",
                    "MyApp.Util.eraseCookie = function(name) {\r",
                    "    MyApp.Util.createCookie(name, \"\", -1);\r",
                    "};\r",
                    "\r",
                    "// So simple, yet so epic.\r",
                    "// This utility permits updating of a timeout delay.\r",
                    "// Perfect tool for say delaying an ajax call until 300ms duration\r",
                    "// since previous keypress, preventing spamming the server with requests,\r",
                    "// and waiting for a more definite request of more characters typed.\r",
                    "/*\r",
                    "    var me = this; // to correctly pass scope into call.\r",
                    "    MyApp.Util.delay(function(){\r",
                    "        me.doDelayedChk();\r",
                    "    }, 300);\r",
                    "    */\r",
                    "MyApp.Util.delay = (function(){\r",
                    "    var timer = 0;\r",
                    "    return function(callback, ms){\r",
                    "        clearTimeout(timer);\r",
                    "        timer = setTimeout(callback, ms);\r",
                    "    };\r",
                    "})();"
                ]
            },
            "designerId": "19a7bcfd-ad7f-42dc-91b4-8bdb96213280"
        }
    ]
}