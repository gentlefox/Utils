/*
 * File: app/controller/Main.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.Main', {
    extend: 'Ext.app.Controller',

    config: {
    },

    launch: function() {
        this.initUtil();

        // "global" required variables accessed via MyApp.config.Runtime
        // MyApp.config.Runtime.getMyRequiredVariable();
        // MyApp.config.Runtime.setMyRequiredVariable(12345);
    },

    initUtil: function() {
        MyApp.Util = {};

        // takes the date in any format and returns a text description of duration
        // ie "3 hours ago"
        // replace "MyApp.app.translate()" with strings if not using localization
        MyApp.Util.getPostedTime = function(date) {
            try {
                var now      = Math.ceil(Number(new Date()) / 1000),
                    dateTime = Math.ceil(Number(new Date(date)) / 1000),
                    diff     = now - dateTime,
                    str;

                if (diff < 60) {
                    return String(diff) + ' ' + MyApp.app.translate('general-time-seconds-ago');
                } else if (diff < 3600) {
                    str = String(Math.ceil(diff / (60)));
                    return str + (str == "1" ? ' ' + MyApp.app.translate('general-time-minute-ago') : ' ' + MyApp.app.translate('general-time-minutes-ago'));
                } else if (diff < 86400) {
                    str = String(Math.ceil(diff / (3600)));
                    return str + (str == "1" ? ' ' + MyApp.app.translate('general-time-hour-ago') : ' ' + MyApp.app.translate('general-time-hours-ago'));
                } else if (diff < 60 * 60 * 24 * 365) {
                    str = String(Math.ceil(diff / (60 * 60 * 24)));
                    return str + (str == "1" ? ' ' + MyApp.app.translate('general-time-day-ago') : ' ' + MyApp.app.translate('general-time-days-ago'));
                } else {
                    return Ext.Date.format(new Date(date), 'jS M \'y');
                }
            } catch (e) {
                return '';
            }
        };

        // Ellipses truncation utility, replacement for any redundant MyApp.Util.truncate calls.
        // short: ellipses(22, true) where 22 = number of characters
        // long: Ext.String.ellipses(string, length, word-remove-boolean);
        MyApp.Util.truncate = function(str, limit, wordRemove) {
            return Ext.String.ellipsis(str, limit, wordRemove);
        };

        // MyApp.Util.formatDate replacement for
        MyApp.Util.formatDate = function(date) {
            return Ext.Date.format(date, 'j/n/Y');
        };

        // Named unTard for the tard efforts of some CMSes mixing output of encoding.
        // str - input string; type - output method
        MyApp.Util.unTard = function(str, type, linkth) {
            if (type == "url") {

                str = str.replace(/&rsquo;/g, '&#39;')
                .replace(/<br>/g, '%0d')
                .replace(/'/g, '%27')
                .replace(/(&nbsp;|\s)+|(&nbsp;|\s)+/g, '%20');
                str = Ext.String.htmlDecode(str);

            } else if (type == "twitter") {

                str = str.replace(/&rsquo;/g, "'")
                .replace(/&quot;/g, '"')
                .replace(/(&nbsp;|\s)+|(&nbsp;|\s)+/g, ' ');

                // str should be near natural. Apply ellipses at length "linkth"
                // consider: move string length calculation here to maximize string length
                // before truncation, considering length of replacement characters.
                // Else, make a "true" calculator of character length catering to encoding.
                str = Ext.String.ellipsis(str, linkth, false);

                // ...and once again prepare the str for use as query string
                str = str.replace(/&rsquo;/g, '&#39;')
                .replace(/<br>/g, '%0d')
                .replace(/'/g, '%27')
                .replace(/(&nbsp;|\s)+|(&nbsp;|\s)+/g, '%20');
                str = Ext.String.htmlDecode(str);

            } else {
                // string format. convert the other way.
                str = str.replace(/&rsquo;/g, "'")
                .replace(/<br>/g, ' ')
                .replace(/(&nbsp;|\s)+|(&nbsp;|\s)+/g, ' ');
                str = Ext.String.htmlDecode(str);
            }
            /* other useful replacements
                .replace(/'/g, '%27')
                .replace(/&#39;/g, '%27')
                .replace(/\./g, '%2E')
                .replace(/\,/g, '%2C')
                .replace(/(\s)/, '%20');
                */
                // test:
                // console.log('str after untard', str);
                return str;
            };

        // Generates an unseen a-tag link and auto-fires the input href.
        // This utility is a blessing for things such as dynamic social buttons which
        // get blocked by device security, timing issues, etc.
        MyApp.Util.openLink = function(href) {
            var link = document.createElement('a');
            link.setAttribute('href', href);
            link.setAttribute('target','_blank');
            var clickevent = document.createEvent('Event');
            clickevent.initEvent('click', true, false);
            link.dispatchEvent(clickevent);
            return false;
        };

        // For the classic cookie experience.
        // For modern, localStorage is so incredibly complex!!
        // err... not.
        // localStorage.getItem(name);
        // localStorage.setItem(name, value);
        MyApp.Util.createCookie = function(name, value, days) {
            var expires;

            if (days) {
                expires = "; expires=" + (Ext.Date.add(new Date(), Ext.Date.DAY, days));
            } else {
                expires = "";
            }
            document.cookie = name + "=" + value + expires + "; path=/";
        };

        MyApp.Util.readCookie = function(name) {
            var nameEQ = name + "=",
                ca     = document.cookie.split(';'),
                i, c;
            for(i=0;i < ca.length;i++) {
                c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1,c.length);
                }
                if (c.indexOf(nameEQ) === 0) {
                    return c.substring(nameEQ.length,c.length);
                }
            }
            return null;
        };

        MyApp.Util.eraseCookie = function(name) {
            MyApp.Util.createCookie(name, "", -1);
        };

        // So simple, yet so epic.
        // This utility permits updating of a timeout delay.
        // Perfect tool for say delaying an ajax call until 300ms duration
        // since previous keypress, preventing spamming the server with requests,
        // and waiting for a more definite request of more characters typed.
        /*
            var me = this; // to correctly pass scope into call.
            MyApp.Util.delay(function(){
                me.doDelayedChk();
            }, 300);
            */
        MyApp.Util.delay = (function(){
            var timer = 0;
            return function(callback, ms){
                clearTimeout(timer);
                timer = setTimeout(callback, ms);
            };
        })();
    }

});